# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpc_pb2 as rpc__pb2


class ctfStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.test_api = channel.unary_unary(
        '/ctf/test_api',
        request_serializer=rpc__pb2.CommonRequest.SerializeToString,
        response_deserializer=rpc__pb2.TestApiReply.FromString,
        )
    self.get_flag = channel.unary_unary(
        '/ctf/get_flag',
        request_serializer=rpc__pb2.CommonRequest.SerializeToString,
        response_deserializer=rpc__pb2.GetFlagReply.FromString,
        )


class ctfServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def test_api(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_flag(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ctfServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'test_api': grpc.unary_unary_rpc_method_handler(
          servicer.test_api,
          request_deserializer=rpc__pb2.CommonRequest.FromString,
          response_serializer=rpc__pb2.TestApiReply.SerializeToString,
      ),
      'get_flag': grpc.unary_unary_rpc_method_handler(
          servicer.get_flag,
          request_deserializer=rpc__pb2.CommonRequest.FromString,
          response_serializer=rpc__pb2.GetFlagReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ctf', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
